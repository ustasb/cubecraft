// Generated by CoffeeScript 1.6.3
(function() {
  window.Cubecraft = {
    SKY_COLOR: [0.53, 0.81, 0.98, 1.0],
    VERTICAL_FOV: 60 * (Math.PI / 180),
    NEAR_VIEW: 0.1,
    FAR_VIEW: 300,
    GRID_SIZE: {
      x: 64,
      y: 32,
      z: 64
    },
    KEY_CODES: {
      LEFT_MOUSE: 1,
      RIGHT_MOUSE: 3,
      w: 87,
      s: 83,
      a: 65,
      d: 68,
      SPACE: 32,
      SHIFT: 16
    },
    MOUSE_DAMPER: 500,
    LIGHT_DIRECTION: [-0.4, -0.4, -1.0],
    LIGHT_COLOR: [0.9, 0.9, 0.9],
    AMBIENT_COLOR: [0.4, 0.4, 0.4],
    gl: null,
    canvas: null,
    chunkManager: null,
    aspect: null,
    mouse_movement: {
      x: 0,
      y: 0
    },
    keysPressed: {},
    pMatrix: mat4.create(),
    init: function() {
      var onReady,
        _this = this;
      this.canvas = document.getElementById('viewport');
      this.gl = WebGLHelpers.getWebGLContext(this.canvas);
      onReady = function(glCubeHelper) {
        var seed, _ref;
        _this.chunkManager = new ChunkManager(glCubeHelper, _this.GRID_SIZE.x, _this.GRID_SIZE.y, _this.GRID_SIZE.z);
        seed = Math.random();
        _this.chunkManager.createLandscape(seed);
        _this.initEvents();
        _this.initFpsStats();
        (_ref = _this.gl).clearColor.apply(_ref, _this.SKY_COLOR);
        _this.gl.enable(_this.gl.DEPTH_TEST);
        return _this.tick();
      };
      return new GLCubeHelper(this.gl, this.LIGHT_DIRECTION, this.LIGHT_COLOR, this.AMBIENT_COLOR, onReady);
    },
    initFpsStats: function() {
      this.fpsStats = new Stats();
      this.fpsStats.domElement.style.position = 'absolute';
      this.fpsStats.domElement.style.left = '0px';
      this.fpsStats.domElement.style.top = '0px';
      return document.body.appendChild(this.fpsStats.domElement);
    },
    initEvents: function() {
      var mousemove, pointerLockChange, resizeWindow,
        _this = this;
      resizeWindow = function() {
        _this.canvas.width = window.innerWidth;
        _this.canvas.height = window.innerHeight;
        _this.aspect = window.innerWidth / window.innerHeight;
        return _this.gl.viewport(0, 0, _this.canvas.width, _this.canvas.height);
      };
      resizeWindow();
      mousemove = function(e) {
        _this.mouse_movement.x = e.webkitMovementX;
        return _this.mouse_movement.y = e.webkitMovementY;
      };
      pointerLockChange = function() {
        if (document.webkitPointerLockElement === _this.canvas) {
          return document.addEventListener('mousemove', mousemove, false);
        } else {
          return document.removeEventListener('mousemove', mousemove, false);
        }
      };
      document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
      $(this.canvas).mousedown(function(e) {
        _this.canvas.webkitRequestPointerLock();
        switch (e.which) {
          case _this.KEY_CODES.LEFT_MOUSE:
            return Cubecraft.chunkManager.addBlock(Player.pos, Player.look);
          case _this.KEY_CODES.RIGHT_MOUSE:
            return Cubecraft.chunkManager.removeBlock(Player.pos, Player.look);
        }
      });
      return $(window).keydown(function(e) {
        return _this.keysPressed[e.keyCode] = true;
      }).keyup(function(e) {
        return _this.keysPressed[e.keyCode] = false;
      }).resize(resizeWindow);
    },
    draw: function() {
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      mat4.perspective(this.pMatrix, this.VERTICAL_FOV, this.aspect, this.NEAR_VIEW, this.FAR_VIEW);
      return this.chunkManager.updateAndDraw(Player.viewMatrix, this.pMatrix);
    },
    tick: function() {
      var _this = this;
      this.fpsStats.begin();
      Player.update();
      this.draw();
      this.fpsStats.end();
      return requestAnimationFrame(function() {
        return _this.tick();
      });
    }
  };

}).call(this);
