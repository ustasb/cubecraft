// Generated by CoffeeScript 1.6.2
(function() {
  window.Player = {
    SPEED: 0.2,
    look: [0, -0.2, 1],
    pos: [25, 15, 0],
    up: [0, 1, 0],
    viewMatrix: mat4.create(),
    update: function() {
      var forward, lookPoint, rotateMatrix, strafe;

      vec3.normalize(this.look, this.look);
      forward = vec3.clone(this.look);
      strafe = vec3.cross([], this.up, this.look);
      vec3.normalize(strafe, strafe);
      rotateMatrix = mat4.create();
      mat4.rotate(rotateMatrix, rotateMatrix, -Cubecraft.mouse_movement.x / Cubecraft.MOUSE_DAMPER, this.up);
      mat4.rotate(rotateMatrix, rotateMatrix, Cubecraft.mouse_movement.y / Cubecraft.MOUSE_DAMPER, strafe);
      vec3.transformMat4(this.look, this.look, rotateMatrix);
      Cubecraft.mouse_movement.x = 0;
      Cubecraft.mouse_movement.y = 0;
      if (Cubecraft.keysPressed[Cubecraft.KEY_CODES.w]) {
        vec3.scale(forward, forward, this.SPEED);
        vec3.add(this.pos, this.pos, forward);
      } else if (Cubecraft.keysPressed[Cubecraft.KEY_CODES.s]) {
        vec3.scale(forward, forward, -this.SPEED);
        vec3.add(this.pos, this.pos, forward);
      }
      if (Cubecraft.keysPressed[Cubecraft.KEY_CODES.a]) {
        vec3.scale(strafe, strafe, this.SPEED);
        vec3.add(this.pos, this.pos, strafe);
      } else if (Cubecraft.keysPressed[Cubecraft.KEY_CODES.d]) {
        vec3.scale(strafe, strafe, -this.SPEED);
        vec3.add(this.pos, this.pos, strafe);
      }
      if (Cubecraft.keysPressed[Cubecraft.KEY_CODES.SPACE]) {
        vec3.add(this.pos, this.pos, vec3.scale([], this.up, this.SPEED));
      } else if (Cubecraft.keysPressed[Cubecraft.KEY_CODES.SHIFT]) {
        vec3.add(this.pos, this.pos, vec3.scale([], this.up, -this.SPEED));
      }
      lookPoint = vec3.add([], this.pos, this.look);
      return mat4.lookAt(this.viewMatrix, this.pos, lookPoint, this.up);
    }
  };

}).call(this);
